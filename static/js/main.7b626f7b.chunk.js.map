{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["config","APP_KEY","JS_KEY","Parse","initialize","serverURL","Square","variant","className","this","props","id","onClick","React","Component","Board","i","squares","scoreCounter","renderSquare","Leader","key","num","username","score","Leaderboard","state","leaders","Table","striped","bordered","hover","map","leader","index","GameOver","show","highscore","Modal","Title","role","aria-label","onHide","animation","Header","checkHighScore","Row","Col","xs","Form","onSubmit","e","preventDefault","resetGame","disapper","addLeader","setState","error","console","log","Control","type","placeholder","aria-describedby","name","value","onChange","event","target","required","Feedback","Button","Footer","Game","Array","fill","timeLeft","show_alert","sqs","randomPosition","Math","floor","random","hitPosition","myInterval","setInterval","randomSquare","clearInterval","Object","extend","set","save","leaders_query","Query","descending","find","length","ascending","first","destroy","then","reRenderLeaders","hs","get","forEach","obj","a","mapData","startTimer","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","App","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7b626f7b.chunk.js","sourcesContent":["export const config = {\n  APP_KEY : \"3uKXhbYQc2aMctaS6bnJa26Q4Ecn7FKLTPbI9jED\",\n  JS_KEY : \"a7PvKS1QzTfpehFDMnR0ebGdPOHwI8ZpDQaB4jkk\"\n}\n\nexport default config;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Parse from 'parse/node';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport config from './config';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Initialize parse to connect back4app\nParse.initialize(config.APP_KEY, config.JS_KEY);\nParse.serverURL = \"https://parseapi.back4app.com/\";\n\n\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\nclass Square extends React.Component {\n\n  render () {\n    return (\n      <button \n        variant=\"secondary\"\n        className={this.props.className} \n        id={this.props.id} \n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}\n\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        id={i}\n        className={this.props.squares[i]}\n        onClick={() => this.props.scoreCounter(i)}\n      />\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"grid\">\n        {this.renderSquare(0)}\n        {this.renderSquare(1)}\n        {this.renderSquare(2)}\n\n        {this.renderSquare(3)}\n        {this.renderSquare(4)}\n        {this.renderSquare(5)}\n\n        {this.renderSquare(6)}\n        {this.renderSquare(7)}\n        {this.renderSquare(8)}\n      </div>\n    );\n  }\n}\n\nclass Leader extends React.Component {\n\n  render () {\n    return (\n      <>\n        <tr key={this.props.id}>\n          <td>{this.props.num}</td>\n          <td>{this.props.username}</td>\n          <td>{this.props.score}</td>\n        </tr>\n      </>\n    );\n  }\n}\n\nclass Leaderboard extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      leaders: [],\n    };\n  }\n\n  render () {\n    return (\n      <Table striped bordered hover variant=\"secondary\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Username</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            this.props.leaders.map((leader, index) => {\n              return (\n                <Leader key={leader[0]}   \n                        num= {index + 1}\n                        id= {leader[0]}\n                        username= {leader[1]}\n                        score= {leader[2]}/>\n              );\n            })\n          }\n        </tbody>\n      </Table>\n      \n    );\n  }\n}\n\nclass GameOver extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n      username: \"\",\n    };\n  }\n   \n  checkHighScore() {\n    if (this.props.score > this.props.highscore) {\n      return (\n        <Modal.Title>\n          <span role=\"img\" aria-label=\"confetti\">ðŸŽ‰HIGHSCORE ðŸŽ‰</span> You Scored {this.props.score}\n        </Modal.Title>\n      );\n    } else {\n      return (\n        <Modal.Title>Game Over! You Scored {this.props.score}</Modal.Title>\n      );\n    }\n  }\n\n  render () {\n    return (\n      <>\n      <Modal show={this.props.show} onHide={() => (null)} animation=\"true\">\n        <Modal.Header>\n          {this.checkHighScore()}\n        </Modal.Header>\n        <Row>\n          <Col xs={9}>\n            <Form onSubmit={(e) => {\n                  try {\n                    e.preventDefault();\n                    this.props.resetGame();\n                    this.props.disapper();\n                    this.props.addLeader(this.state.username, this.props.score);\n                    this.setState({username: \"\"});\n                  } catch (error) {\n                    console.log(error);\n                  }\n                }}>\n              \n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"username\"\n                  value={this.state.username}\n                  onChange={(event) => {\n                    this.setState({username: event.target.value});\n                  }}\n                  required\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a username.\n                </Form.Control.Feedback>\n              \n            </Form>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" \n                    type=\"submit\"\n                    onClick={() => {\n                      try {\n                        this.props.resetGame();\n                        this.props.disapper();\n                        this.props.addLeader(this.state.username, this.props.score);\n                        this.setState({username: \"\"});\n                      } catch (error) {\n                        console.log(error);\n                      }\n                    }}>\n              Submit\n            </Button>\n          </Col>\n        </Row>\n        <Modal.Footer>\n          <Button className=\"score-form-Leave\" \n                  onClick={() => {\n                    this.props.disapper();\n                    this.props.resetGame();\n                  }}   \n                  variant=\"outline-success\">\n            Leave\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </>\n    );\n  }\n}\n\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"), //className for squares,\n      score: 0,\n      timeLeft: 5,\n      show_alert: false,\n      leaders: [],\n      highscore: 0,\n    };\n  }\n\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n  randomSquare()  {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8)\n    // console.log(\"Rand position = \" + randomPosition)\n    sqs[randomPosition] = \"mole\"\n    this.hitPosition = randomPosition // hitPosition is used to increment score\n    this.setState({squares: sqs});\n  }\n\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({score: this.state.score + 1})\n    }\n  }\n\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n  startTimer () {\n    this.resetGame();\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        })\n        this.randomSquare()\n      } else {\n        clearInterval(this.myInterval)\n        this.hitPosition = -1;\n        this.setState({squares: Array(9).fill(\"square\"), show_alert: true})\n      }\n    }, 1000)\n  }\n\n  resetGame () {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      })\n    }\n  }\n\n  // This code is for using expressapi and mongo\n  // async addLeader(username, score) {\n  //   console.log(\"add leader just got called with\", username, \" -> \", score);\n  //   const url = `/api/leaders/`;\n  //   const response = await fetch(url, {\n  //     method: 'post',\n  //     body: JSON.stringify({username: username, score: score}),\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     }\n  //   });\n  //   const api_data = await response.json();\n  //   this.setState({leaders: []});\n  //   console.log(\"%%%%\", api_data);\n  //   await api_data.forEach((obj) => {\n  //     const mapData = async () => {\n  //       this.setState(state => {\n  //         const leaders = [...state.leaders, [obj._id, obj.username, obj.score] ];\n  //         return {\n  //           leaders,\n  //         };\n  //       })\n  //     }\n  //     mapData();\n  //   })\n\n  // }\n  \n  async addLeader(username, score) {\n    if (this.state.highscore < score) { this.setState({highscore: score}); }\n    try {\n      const Leader = Parse.Object.extend('Leader');\n      const leader = new Leader();\n      leader.set(\"username\", username);\n      leader.set(\"score\", score);\n      leader.set(\"password\", \"none\");\n      leader.save();\n\n      const leaders_query = new Parse.Query(Leader);\n      leaders_query.descending(\"score\");\n      let leaders = await leaders_query.find();\n\n      if (leaders.length > 4) {\n        const remove = await leaders_query.ascending(\"score\").first();\n        remove.destroy().then(() => {\n          //console.log(remove.get('username'));\n          this.reRenderLeaders();\n        })\n      }\n    } catch (error) {\n      console.error(error);\n    }\n\n  }\n  \n  async reRenderLeaders() {\n    const Leader = Parse.Object.extend('Leader');\n    const leaders_query = new Parse.Query(Leader);\n    leaders_query.descending(\"score\");\n    const leaders = await leaders_query.find();\n\n    let hs = await leaders_query.first();\n    this.setState({highscore: hs.get('score'), leaders: []});\n\n    leaders.forEach((obj) => {\n      const mapData = async () => {\n        this.setState(state => {\n          const leaders = [...state.leaders, [obj.id, obj.get('username'), obj.get('score')] ];\n          return {\n            leaders,\n          };\n        })\n      }\n      mapData();\n    })\n  }\n\n  async componentDidMount() {\n    this.reRenderLeaders();\n  }\n\n  // This code is for using expressapi and mongo\n  // async componentDidMount() {\n  //   const url = `/api/leaders/`;\n  //   const response = await fetch(url);\n  //   const api_data = await response.json();\n  //   console.log(api_data);\n  //   api_data.forEach((obj) => {\n  //     const mapData = async () => {\n  //       this.setState(state => {\n  //         const leaders = [...state.leaders, [obj._id, obj.username, obj.score] ];\n  //         return {\n  //           leaders,\n  //         };\n  //       })\n  //     }\n  //     mapData();\n  //   })\n  // }\n\n  render () {\n    return (\n      <div className=\"parent-div\">\n        \n        <div className=\"page-header\">\n          <h1>Whack-A-Mole</h1>\n        </div>\n\n        <button type=\"button\" className=\"btn btn-success\" \n          onClick={() => this.startTimer()}>Start</button>\n        <button type=\"button\" className=\"btn btn-warning\"\n          onClick={() => {this.resetGame()}}> Reset </button>\n\n        <h4 id=\"score\">Score: {this.state.score}</h4>\n        <div className=\"game\">\n          <h4 id=\"time-left\">Seconds left: {this.state.timeLeft}</h4>\n          \n          <Board squares= {this.state.squares} scoreCounter= {(i) => this.scoreCounter(i)}/>\n          <GameOver show= {this.state.show_alert} \n              disapper= {() => this.setState({show_alert:false})}\n              resetGame= {() => this.resetGame()}\n              addLeader= {(username, score) => this.addLeader(username, score)}\n              score= {this.state.score}\n              highscore= {this.state.highscore}/>\n        </div>\n        <div className=\"high-score-list\">\n          <h3>High Scores</h3>\n          <Leaderboard leaders= {this.state.leaders}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Parse from 'parse/node';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nParse.initialize(\"3uKXhbYQc2aMctaS6bnJa26Q4Ecn7FKLTPbI9jED\", \"a7PvKS1QzTfpehFDMnR0ebGdPOHwI8ZpDQaB4jkk\");\nParse.serverURL = \"https://parseapi.back4app.com/\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}