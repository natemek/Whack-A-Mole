{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","variant","className","this","props","id","onClick","React","Component","Board","i","squares","scoreCounter","renderSquare","Leader","key","num","username","score","Leaderboard","state","leaders","Table","striped","bordered","hover","map","leader","index","GameOver","show","Modal","onHide","animation","Header","Title","Row","Col","xs","Form","InputGroup","Prepend","Text","Control","type","placeholder","aria-describedby","name","value","onChange","event","setState","target","required","Feedback","Button","disapper","addLeader","console","log","error","Footer","Game","Array","fill","timeLeft","show_alert","sqs","randomPosition","Math","floor","random","hitPosition","myInterval","setInterval","randomSquare","clearInterval","startTimer","fetch","method","body","JSON","stringify","headers","response","json","api_data","forEach","obj","a","_id","mapData","resetGame","reset","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","App","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fee30ea7.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\nclass Square extends React.Component {\n\n  render () {\n    return (\n      <button \n        variant=\"secondary\"\n        className={this.props.className} \n        id={this.props.id} \n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}\n\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        id={i}\n        className={this.props.squares[i]}\n        onClick={() => this.props.scoreCounter(i)}\n      />\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"grid\">\n        {this.renderSquare(0)}\n        {this.renderSquare(1)}\n        {this.renderSquare(2)}\n\n        {this.renderSquare(3)}\n        {this.renderSquare(4)}\n        {this.renderSquare(5)}\n\n        {this.renderSquare(6)}\n        {this.renderSquare(7)}\n        {this.renderSquare(8)}\n      </div>\n    );\n  }\n}\n\nclass Leader extends React.Component {\n\n  render () {\n    return (\n      <>\n        <tr key={this.props.id}>\n          <td>{this.props.num}</td>\n          <td>{this.props.username}</td>\n          <td>{this.props.score}</td>\n        </tr>\n      </>\n    );\n  }\n}\n\nclass Leaderboard extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      leaders: [],\n    };\n  }\n\n  render () {\n    return (\n      <Table striped bordered hover variant=\"secondary\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Username</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            this.props.leaders.map((leader, index) => {\n              return (\n                <Leader key={leader[0]}   \n                        num= {index + 1}\n                        id= {leader[0]}\n                        username= {leader[1]}\n                        score= {leader[2]}/>\n              );\n            })\n          }\n        </tbody>\n      </Table>\n      \n    );\n  }\n}\n\nclass GameOver extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n      username: \"\",\n    };\n  }\n\n  render () {\n    return (\n      <>\n      <Modal show={this.props.show} onHide={() => (null)} animation=\"true\">\n        <Modal.Header>\n          <Modal.Title>Game Over! You Scored {this.props.score}</Modal.Title>\n        </Modal.Header>\n        <Row>\n          <Col xs={9}>\n            <Form>\n              <InputGroup>\n                <InputGroup.Prepend>\n                <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Username\"\n                aria-describedby=\"inputGroupPrepend\"\n                name=\"username\"\n                value={this.state.username}\n                onChange={(event) => {\n                  this.setState({username: event.target.value});\n                }}\n                required\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                Please choose a username.\n              </Form.Control.Feedback>\n              \n              </InputGroup>\n            </Form>\n          </Col>\n          <Col>\n            <Button variant=\"primary\" \n                    type=\"submit\"\n                    onClick={() => {\n                      try {\n                        this.props.disapper();\n                        this.props.addLeader(this.state.username, this.props.score);\n                        console.log(\"Submit button clicked\");\n                      } catch (error) {\n                        console.log(error);\n                      }\n                    }}>\n              Submit\n            </Button>\n          </Col>\n        </Row>\n        <Modal.Footer>\n          <Button className=\"score-form-Leave\" \n                  onClick={() => this.props.disapper()}   \n                  variant=\"outline-success\">\n            Leave\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      </>\n    );\n  }\n}\n\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"), //className for squares,\n      score: 0,\n      timeLeft: 5,\n      show_alert: false,\n      leaders: [],\n    };\n  }\n\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n  randomSquare()  {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8)\n    console.log(\"Rand position = \" + randomPosition)\n    sqs[randomPosition] = \"mole\"\n    this.hitPosition = randomPosition // hitPosition is used to increment score\n    this.setState({squares: sqs});\n  }\n\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({score: this.state.score + 1})\n    }\n  }\n\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n  startTimer () {\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        })\n        this.randomSquare()\n      } else {\n        clearInterval(this.myInterval)\n        this.setState({squares: Array(9).fill(\"square\")})\n        // alert('GAME OVER! Your final score is ' + this.state.score)\n        // GameOver();\n        this.setState({show_alert: true})\n      }\n    }, 1000)\n  }\n\n  resetGame () {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      })\n      this.startTimer()\n    }\n  }\n\n  async addLeader(username, score) {\n    console.log(\"add leader just got called with\", username, \" -> \", score);\n    const url = `/api/leaders/`;\n    const response = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify({username: username, score: score}),\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    const api_data = await response.json();\n    this.setState({leaders: []});\n    console.log(\"%%%%\", api_data);\n    await api_data.forEach((obj) => {\n      const mapData = async () => {\n        this.setState(state => {\n          const leaders = [...state.leaders, [obj._id, obj.username, obj.score] ];\n          return {\n            leaders,\n          };\n        })\n      }\n      mapData();\n    })\n\n  }\n  \n\n  async componentDidMount() {\n    const url = `/api/leaders/`;\n    const response = await fetch(url);\n    const api_data = await response.json();\n    console.log(api_data);\n    api_data.forEach((obj) => {\n      const mapData = async () => {\n        this.setState(state => {\n          const leaders = [...state.leaders, [obj._id, obj.username, obj.score] ];\n          return {\n            leaders,\n          };\n        })\n      }\n      mapData();\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"parent-div\">\n        \n        <div className=\"page-header\">\n          <h1>Whack-A-Mole</h1>\n        </div>\n\n        <button type=\"button\" className=\"btn btn-success\" \n          onClick={() => this.startTimer()}>Start</button>\n        <button type=\"button\" className=\"btn btn-warning\"\n          onClick={() => {this.resetGame()}}> Reset </button>\n\n        <h4 id=\"score\">Score: {this.state.score}</h4>\n        <div className=\"game\">\n          <h4 id=\"time-left\">Seconds left: {this.state.timeLeft}</h4>\n          \n          <Board squares= {this.state.squares} scoreCounter= {(i) => this.scoreCounter(i)}/>\n          <GameOver show= {this.state.show_alert} \n              disapper= {() => this.setState({show_alert:false})}\n              reset= {() => this.resetGame()}\n              addLeader= {(username, score) => this.addLeader(username, score)}\n              score= {this.state.score}/>\n        </div>\n        <div className=\"high-score-list\">\n          <h3>High Scores</h3>\n          <Leaderboard leaders= {this.state.leaders}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}