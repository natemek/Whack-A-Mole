{"ast":null,"code":"var _jsxFileName = \"/Users/natnaelmekonnen/Documents/react-practice/Whack-A-Mole/src/App.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport HashMap from 'hashmap';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport mole from './mole.jpg';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\n\nclass Square extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: this.props.className,\n      id: this.props.id,\n      onClick: () => this.props.onClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      id: i,\n      className: this.props.squares[i],\n      onClick: () => this.props.scoreCounter(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2), this.renderSquare(3), this.renderSquare(4), this.renderSquare(5), this.renderSquare(6), this.renderSquare(7), this.renderSquare(8));\n  }\n\n}\n\nclass OnAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Alert, {\n      show: this.state.show,\n      variant: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Alert.Heading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.setState({\n        show: false\n      }),\n      variant: \"outline-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Ok\"));\n  }\n\n} // function OnAlert () {\n//   const [show, setShow] = useState(true);\n//   return (\n//     <Alert show={show} variant=\"success\">\n//       <Alert.Heading>GAME OVER!</Alert.Heading>\n//       <Button onClick={() => setShow(false)} variant=\"outline-success\">\n//         Ok\n//       </Button>\n//     </Alert>\n//   );\n// }\n\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"),\n      //className for squares\n      score: 0,\n      timeLeft: 5,\n      show_alert: false\n    };\n  }\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n\n\n  randomSquare() {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8);\n    console.log(\"Rand position = \" + randomPosition);\n    sqs[randomPosition] = \"mole\";\n    this.hitPosition = randomPosition; // hitPosition is used to increment score\n\n    this.setState({\n      squares: sqs\n    });\n  }\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n\n\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n  }\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n\n\n  startTimer() {\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        });\n        this.randomSquare();\n      } else {\n        clearInterval(this.myInterval);\n        this.setState({\n          squares: Array(9).fill(\"square\")\n        }); // alert('GAME OVER! Your final score is ' + this.state.score)\n        // OnAlert();\n\n        return /*#__PURE__*/React.createElement(OnAlert, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 16\n          }\n        });\n      }\n    }, 1000);\n  }\n\n  resetGame() {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      });\n      this.startTimer();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, \"Whack-A-Mole\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning\",\n      onClick: () => this.resetGame(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success\",\n      onClick: () => this.startTimer(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }, \"Score: \", this.state.score), /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"time-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Seconds left: \", this.state.timeLeft), /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      scoreCounter: i => this.scoreCounter(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OnAlert, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nexport default Game;","map":{"version":3,"sources":["/Users/natnaelmekonnen/Documents/react-practice/Whack-A-Mole/src/App.js"],"names":["React","useState","ReactDOM","HashMap","mole","Container","Button","Alert","Square","Component","render","props","className","id","onClick","Board","renderSquare","i","squares","scoreCounter","OnAlert","constructor","state","show","setState","Game","Array","fill","score","timeLeft","show_alert","randomSquare","sqs","randomPosition","Math","floor","random","console","log","hitPosition","startTimer","myInterval","setInterval","clearInterval","resetGame","document","getElementById"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport HashMap from 'hashmap';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport mole from './mole.jpg'\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\nclass Square extends React.Component {\n\n  render () {\n    return (\n      <button className={this.props.className} \n        id={this.props.id} \n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}\n\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        id={i}\n        className={this.props.squares[i]}\n        onClick={() => this.props.scoreCounter(i)}\n      />\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"grid\">\n        {this.renderSquare(0)}\n        {this.renderSquare(1)}\n        {this.renderSquare(2)}\n\n        {this.renderSquare(3)}\n        {this.renderSquare(4)}\n        {this.renderSquare(5)}\n\n        {this.renderSquare(6)}\n        {this.renderSquare(7)}\n        {this.renderSquare(8)}\n      </div>\n    );\n  }\n}\n\nclass OnAlert extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n  render () {\n    return (\n      <Alert show={this.state.show} variant=\"success\">\n        <Alert.Heading>GAME OVER!</Alert.Heading>\n        <Button onClick={() => this.setState({show:false})} variant=\"outline-success\">\n          Ok\n        </Button>\n      </Alert>\n    );\n  }\n}\n// function OnAlert () {\n//   const [show, setShow] = useState(true);\n//   return (\n//     <Alert show={show} variant=\"success\">\n//       <Alert.Heading>GAME OVER!</Alert.Heading>\n//       <Button onClick={() => setShow(false)} variant=\"outline-success\">\n//         Ok\n//       </Button>\n//     </Alert>\n//   );\n// }\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"), //className for squares\n      score: 0,\n      timeLeft: 5,\n      show_alert: false,\n    };\n  }\n\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n  randomSquare()  {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8)\n    console.log(\"Rand position = \" + randomPosition)\n    sqs[randomPosition] = \"mole\"\n    this.hitPosition = randomPosition // hitPosition is used to increment score\n    this.setState({squares: sqs});\n  }\n\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({score: this.state.score + 1})\n    }\n  }\n\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n  startTimer () {\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        })\n        this.randomSquare()\n      } else {\n        clearInterval(this.myInterval)\n        this.setState({squares: Array(9).fill(\"square\")})\n        // alert('GAME OVER! Your final score is ' + this.state.score)\n        // OnAlert();\n        return <OnAlert/>\n      }\n    }, 1000)\n  }\n\n  resetGame () {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      })\n      this.startTimer()\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"center\">\n        <Container fluid=\"lg\">\n        <div className=\"page-header\">\n          <h1>Whack-A-Mole</h1>\n        </div>\n\n        <button type=\"button\" className=\"btn btn-warning\"\n          onClick={() => this.resetGame()}>Reset</button>\n        <button type=\"button\" className=\"btn btn-success\" \n          onClick={() => this.startTimer()}>Start</button>\n\n        <h4 id=\"score\">Score: {this.state.score}</h4>\n\n        <h4 id=\"time-left\">Seconds left: {this.state.timeLeft}</h4>\n        \n        <Board squares= {this.state.squares} scoreCounter= {(i) => this.scoreCounter(i)}/>\n        <OnAlert/>\n        </Container>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}