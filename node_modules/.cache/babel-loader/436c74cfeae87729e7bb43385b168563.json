{"ast":null,"code":"var _jsxFileName = \"/Users/natnaelmekonnen/Documents/react-practice/Whack-A-Mole/src/App.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport LeadersJson from './leaders.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\n\nclass Square extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      variant: \"secondary\",\n      className: this.props.className,\n      id: this.props.id,\n      onClick: () => this.props.onClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      id: i,\n      className: this.props.squares[i],\n      onClick: () => this.props.scoreCounter(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2), this.renderSquare(3), this.renderSquare(4), this.renderSquare(5), this.renderSquare(6), this.renderSquare(7), this.renderSquare(8));\n  }\n\n}\n\nclass Leaderboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      leaders: [[1, \"@default\", 0]]\n    };\n  }\n\n  renderRow(num, username, score) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: num,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, num), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, username), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, score));\n  } // async componentDidMount() {\n  //   const url = \"https://gist.githubusercontent.com/natemek/48328f5890efb975a2f7fdef990b0eb0/raw/a74af4b6a1f263a1ba62713e69636db299552787/leaders\";\n  //   const response = await fetch(url);\n  //   const api_data = await response.json();\n  //   this.setState({data: api_data})\n  //   console.log(api_data)\n  // }\n\n\n  async componentDidMount() {\n    const newScore = Math.ceil(Math.random() * 10);\n    console.log(\"new score= \", newScore);\n    this.setState({\n      leaders: [[1, \"@default\", newScore]]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Score\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, this.state.leaders.map(leader => //console.log(\"num= \", leader.num, \"user= \", leader.user, \"score= \", leader.score))\n    this.renderRow(leader[0], leader[1], leader[2]))));\n  }\n\n}\n\nclass GameOver extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Modal, {\n      show: this.props.show,\n      onHide: () => null,\n      animation: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }\n    }, \"Game Over!\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.props.disapper(),\n      variant: \"outline-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"Leave\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        this.props.disapper();\n        this.props.reset();\n      },\n      variant: \"warning\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, \"Reset\")));\n  }\n\n}\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"),\n      //className for squares\n      leaders: [[1, \"@test\", 20], [2, \"@kgb\", 18], [3, \"@etj\", 15]],\n      score: 0,\n      timeLeft: 5,\n      show_alert: false,\n      data: []\n    };\n  }\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n\n\n  randomSquare() {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8);\n    console.log(\"Rand position = \" + randomPosition);\n    sqs[randomPosition] = \"mole\";\n    this.hitPosition = randomPosition; // hitPosition is used to increment score\n\n    this.setState({\n      squares: sqs\n    });\n  }\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n\n\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n  }\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n\n\n  startTimer() {\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        });\n        this.randomSquare();\n      } else {\n        clearInterval(this.myInterval);\n        this.setState({\n          squares: Array(9).fill(\"square\")\n        }); // alert('GAME OVER! Your final score is ' + this.state.score)\n        // GameOver();\n\n        this.setState({\n          show_alert: true\n        });\n      }\n    }, 1000);\n  }\n\n  resetGame() {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      });\n      this.startTimer();\n    }\n  } // async componentDidMount() {\n  //   const url = \"https://gist.githubusercontent.com/natemek/48328f5890efb975a2f7fdef990b0eb0/raw/a74af4b6a1f263a1ba62713e69636db299552787/leaders\";\n  //   const response = await fetch(url);\n  //   const api_data = await response.json();\n  //   this.setState({data: api_data})\n  //   console.log(api_data)\n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"parent-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, \"Whack-A-Mole\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-success\",\n      onClick: () => this.startTimer(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning\",\n      onClick: () => {\n        this.resetGame();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, \" Reset \"), /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }, \"Score: \", this.state.score), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"time-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }, \"Seconds left: \", this.state.timeLeft), /*#__PURE__*/React.createElement(Board, {\n      squares: this.state.squares,\n      scoreCounter: i => this.scoreCounter(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(GameOver, {\n      show: this.state.show_alert,\n      disapper: () => this.setState({\n        show_alert: false\n      }),\n      reset: () => this.resetGame(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"high-score-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, \"High Scores\"), /*#__PURE__*/React.createElement(Leaderboard, {\n      leaders: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Game, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nexport default Game;","map":{"version":3,"sources":["/Users/natnaelmekonnen/Documents/react-practice/Whack-A-Mole/src/App.js"],"names":["React","ReactDOM","LeadersJson","Button","Modal","Table","Square","Component","render","props","className","id","onClick","Board","renderSquare","i","squares","scoreCounter","Leaderboard","constructor","state","leaders","renderRow","num","username","score","componentDidMount","newScore","Math","ceil","random","console","log","setState","map","leader","GameOver","show","disapper","reset","Game","Array","fill","timeLeft","show_alert","data","randomSquare","sqs","randomPosition","floor","hitPosition","startTimer","myInterval","setInterval","clearInterval","resetGame","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport LeadersJson from './leaders.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Table from 'react-bootstrap/Table';\n\n/**\n * Represents a single square component which can be rendered using\n * the square style or the mole style as defined in style.css\n * @param className can be either \"square\" or \"mole\"\n * @param id to identify each square\n * @param onClick a function triggered when square is clicked\n */\nclass Square extends React.Component {\n\n  render () {\n    return (\n      <button \n        variant=\"secondary\"\n        className={this.props.className} \n        id={this.props.id} \n        onClick={() => this.props.onClick()}>\n      </button>\n    );\n  }\n}\n\n/**\n * Represents 9 squares styled in a grid format\n * @param squares is an array which has the className for each\n * squares\n * @param scoreCounter is a function that gets triggered when\n * when squares are clicked\n */\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        id={i}\n        className={this.props.squares[i]}\n        onClick={() => this.props.scoreCounter(i)}\n      />\n    );\n  }\n\n  render () {\n    return (\n      <div className=\"grid\">\n        {this.renderSquare(0)}\n        {this.renderSquare(1)}\n        {this.renderSquare(2)}\n\n        {this.renderSquare(3)}\n        {this.renderSquare(4)}\n        {this.renderSquare(5)}\n\n        {this.renderSquare(6)}\n        {this.renderSquare(7)}\n        {this.renderSquare(8)}\n      </div>\n    );\n  }\n}\n\nclass Leaderboard extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      leaders: [[1, \"@default\", 0]],\n    };\n  }\n  renderRow (num, username, score) {\n    return (\n      <tr key={num}>\n        <td>{num}</td>\n        <td>{username}</td>\n        <td>{score}</td>\n      </tr>\n    );\n  }\n\n  // async componentDidMount() {\n  //   const url = \"https://gist.githubusercontent.com/natemek/48328f5890efb975a2f7fdef990b0eb0/raw/a74af4b6a1f263a1ba62713e69636db299552787/leaders\";\n  //   const response = await fetch(url);\n  //   const api_data = await response.json();\n  //   this.setState({data: api_data})\n  //   console.log(api_data)\n  // }\n\n  async componentDidMount() {\n    const newScore = Math.ceil(Math.random()*10);\n    console.log(\"new score= \", newScore);\n    this.setState({\n      leaders: [[1, \"@default\", newScore]],\n    });\n  }\n\n  render () {\n    return (\n      <Table striped bordered hover variant=\"secondary\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Username</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.leaders.map((leader) => \n            //console.log(\"num= \", leader.num, \"user= \", leader.user, \"score= \", leader.score))\n            this.renderRow(leader[0], leader[1], leader[2]))\n          }\n        </tbody>\n      </Table>\n      \n    );\n  }\n}\n\nclass GameOver extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n    };\n  }\n  render () {\n    return (\n      <Modal show={this.props.show} onHide={() => (null)} animation=\"true\">\n        <Modal.Header>\n          <Modal.Title>Game Over!</Modal.Title>\n        </Modal.Header>\n        <Modal.Footer>\n          <Button onClick={() => this.props.disapper()} variant=\"outline-success\">\n            Leave\n          </Button>\n          <Button onClick={() => {this.props.disapper();this.props.reset()}} variant=\"warning\">\n            Reset\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\n/**\n * Game component has all the game functionalites and is parent to\n * Board\n */\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(\"square\"), //className for squares\n      leaders: [[1,\"@test\", 20], [2,\"@kgb\", 18], [3,\"@etj\", 15]],\n      score: 0,\n      timeLeft: 5,\n      show_alert: false,\n      data: [],\n    };\n  }\n\n  /**\n   * Clears the board and randomly picks one square to be a mole\n   */\n  randomSquare()  {\n    const sqs = Array(9).fill(\"square\");\n    let randomPosition = Math.floor(Math.random() * 8)\n    console.log(\"Rand position = \" + randomPosition)\n    sqs[randomPosition] = \"mole\"\n    this.hitPosition = randomPosition // hitPosition is used to increment score\n    this.setState({squares: sqs});\n  }\n\n  /**\n   * checks if the square id and the hitPosition are the same and\n   * increments the score\n   * @param {*} i is the id of a square or its index\n   */\n  scoreCounter(i) {\n    if (i === this.hitPosition) {\n      this.setState({score: this.state.score + 1})\n    }\n  }\n\n  /**\n   * creates an interval which counts down timeLeft to 0 and calls\n   * randomSquare() every second. Once timeLeft reaches 0, it alerts\n   * the user gameover and reports the final score\n   */\n  startTimer () {\n    this.myInterval = setInterval(() => {\n      if (this.state.timeLeft > 0) {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        })\n        this.randomSquare()\n      } else {\n        clearInterval(this.myInterval)\n        this.setState({squares: Array(9).fill(\"square\")})\n        // alert('GAME OVER! Your final score is ' + this.state.score)\n        // GameOver();\n        this.setState({show_alert: true})\n      }\n    }, 1000)\n  }\n\n  resetGame () {\n    if (this.state.timeLeft === 0) {\n      this.setState({\n        squares: Array(9).fill(\"square\"),\n        score: 0,\n        timeLeft: 5\n      })\n      this.startTimer()\n    }\n  }\n\n  // async componentDidMount() {\n  //   const url = \"https://gist.githubusercontent.com/natemek/48328f5890efb975a2f7fdef990b0eb0/raw/a74af4b6a1f263a1ba62713e69636db299552787/leaders\";\n  //   const response = await fetch(url);\n  //   const api_data = await response.json();\n  //   this.setState({data: api_data})\n  //   console.log(api_data)\n  // }\n\n  render () {\n    return (\n      <div className=\"parent-div\">\n        \n        <div className=\"page-header\">\n          <h1>Whack-A-Mole</h1>\n        </div>\n\n        <button type=\"button\" className=\"btn btn-success\" \n          onClick={() => this.startTimer()}>Start</button>\n        <button type=\"button\" className=\"btn btn-warning\"\n          onClick={() => {this.resetGame()}}> Reset </button>\n\n        <h4 id=\"score\">Score: {this.state.score}</h4>\n        <div className=\"game\">\n          <h4 id=\"time-left\">Seconds left: {this.state.timeLeft}</h4>\n          \n          <Board squares= {this.state.squares} scoreCounter= {(i) => this.scoreCounter(i)}/>\n          <GameOver show= {this.state.show_alert} \n              disapper= {() => this.setState({show_alert:false})}\n              reset= {() => this.resetGame()}/>\n        </div>\n        <div className=\"high-score-list\">\n          <h3>High Scores</h3>\n          <Leaderboard leaders={this.state.data}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}